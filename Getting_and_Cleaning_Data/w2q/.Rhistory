install.packages('doParallel')
install.packages('xtable')
library(IRanges)
source("http://bioconductor.org/biocLite.R")
biocLite("IRanges")
install.packages("IMA",repos=c("http://rforge.net"))
install.packages(‘WriteXLS’, ‘limma’, ‘bioDist’, ‘preprocessCore’, ‘dplR’)
install.packages('WriteXLS' 'limma')
install.packages('WriteXLS', 'limma')
q()
install.packages("IMA",repos=c("http://rforge.net"))
install.packages('dplR')
install.packages("IMA",repos=c("http://rforge.net"))
install.packages('prcomp')
install.packages('varimax')
install.packages('gclus')
prcomp
varimax
?prcomp
?varimax
library(car)
install.packages('car')
library(car)
?car
some(iris)
scatterplotMatrix(~ Sepal.length + Sepal.Width + Petal.length + Petal.Width | Species,
data=iris, smooth=FALSE, reg.line=FALSE, ellipse=TRUE, by.groups=TRUE, diagonal="none"")
scatterplotMatrix(~ Sepal.length + Sepal.Width + Petal.length + Petal.Width | Species,
data=iris, smooth=FALSE, reg.line=FALSE, ellipse=TRUE, by.groups=TRUE, diagonal="none"")
scatterplotMatrix(~ Sepal.length + Sepal.Width + Petal.length + Petal.Width | Species,
data=iris, smooth=FALSE, reg.line=FALSE, ellipse=TRUE, by.groups=TRUE, diagonal="none")
?scatterplotMatrix
scatterplotMatrix(~ Sepal.length + Sepal.Width + Petal.length + Petal.Width | Species)
scatterplotMatrix(~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width | Species,
data=iris, smooth=FALSE, reg.line=FALSE, ellipse=TRUE, by.groups=TRUE, diagonal="none")
par(mfrow=c(2, 2))
for  (response in c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width"))
Boxplot(iris[, response] ~ Species, data=iris, ylab=response)
mod.iris <= lm(cbind(Sepal.Length, Sepal.Width, Petal.Length, Petal.Width) ~ Species, data=iris)
mod.iris <- lm(cbind(Sepal.Length, Sepal.Width, Petal.Length, Petal.Width) ~ Species, data=iris)
mod.iris
class(mod.iris)
summary(mod.iris)
iris
(manova.iris <- Anova(mod.iris))
class(manova.iris)
summary(manova.iris)
anova(mod.iris)
linearHypothesis(mod.iris, "0.5*Speciesversicolor + 0.5*Speciesvirginica", verbose=TRUE)
linearHypothesis(mod.iris, "Speciesversicolor = Speciesvirgninica", verbose=TRUE)
linearHypothesis(mod.iris, "Speciesversicolor = Speciesvirginica", verbose=TRUE)
C <- matrix(c(1, -0.5, -0.5, 0, 1, -1), 3, 2)
colnames(C) <- c("setosa vs. versicolor & virginica", "versicolor & virginica")
contrasts(iris$Species) <- C
contrasts(iris$Species)
(mod.iris.2 <- update(mod.iris))
linearHypothesis(mod.iris.2, c(0, 1, 0)) # setosa vs. versicolor & virginica
linearHypothesis(mod.iris.2, c(0, 0, 1)) # versicolor vs. virginica
anova(mod.iris, imatrix=list(Sepal.Length=matrix(c(1, 0, 0, 0))))
linearHypothesis(mod.iris, c("Speciesversicolor = 0", "Speciesvirginica = 0"),
P=matrix(c(1, 0, 0, 0))) # equivalent
Anova(lm(Sepal.Length ~ Species, data=iris))
some(OBrienKaiser)
contrast(OBrienKaiser$treatment)
contrasts(OBrienKaiser$treatment)
contrasts(OBrienKaiser$gender)
xtabs(~ treatment + gender, data=OBrienKaiser)
phase <- factor(rep(c("pretest", "posttest", "followup"), c(5, 5, 5)),
levels=c("pretest", "posttest", "followup"))
hour <0 ordered(rep(1:5, 3))
idata <- data.frame(phase, hour)
idata
hour <- ordered(rep(1:5, 3))
idata <- data.frame(phase, hour)
idata
OBrien.long <- reshape(OBrienKaiser, varying=c("pre.1", "pre.2", "pre.3", "pre.4", "pre.5",
"post.1", "post.2", "post.3", "post.4", "post.5",
"fup.1", "fup.2", "fup.3", "fup.4", "fup.5"),
v.names="scores",
timevar="phase.hour", direction="long")
OBrien.long <- reshape(OBrienKaiser, varying=c("pre.1", "pre.2", "pre.3", "pre.4", "pre.5",
"post.1", "post.2", "post.3", "post.4", "post.5",
"fup.1", "fup.2", "fup.3", "fup.4", "fup.5"),
v.names="scores",
timevar="phase.hour", direction="long")
OBrien.long$phase <- ordered(c("pre", "post", "fup")[1 + ((OBrien.long$phase.hour - 1) %% 5)],
levels=c("pre", "post", "fup"))
OBrien.long$hour <- ordered(1 + ((OBrien.long$phase.hour - 1) %% 5))
dim(OBrien.long)
head(OBrien.long, 25)
Means <- as.data.frame(ftable(with(OBrien.long,
tapply(score, list(treatment=treatment, gender=gender,
phase=phase, hour=hour), mean))))
names(Means)[5] <- "score"
dim(Means)
OBrien.long <- reshape(OBrienKaiser, varying=c("pre.1", "pre.2", "pre.3", "pre.4", "pre.5",
"post.1", "post.2", "post.3", "post.4", "post.5",
"fup.1", "fup.2", "fup.3", "fup.4", "fup.5"),
v.names="score",
timevar="phase.hour", direction="long")
OBrien.long$phase <- ordered(c("pre", "post", "fup")[1 + ((OBrien.long$phase.hour - 1) %% 5)],
levels=c("pre", "post", "fup"))
OBrien.long$hour <- ordered(1 + ((OBrien.long$phase.hour - 1) %% 5))
dim(OBrien.long)
head(OBrien.long, 25)
Means <- as.data.frame(ftable(with(OBrien.long,
tapply(score, list(treatment=treatment, gender=gender,
phase=phase, hour=hour), mean))))
names(Means)[5] <- "score"
dim(Means)
head(Mean, 25)
head(Means, 25)
library(lattice)
xyplot(score ~ hour | phase + treatment, groups=gender, type="b",
strip=function(...) strip.default(strip.names=c(TRUE, TRUE), ...),
lty=1:2, pch=c(15, 1), col=1:2, cex=1.25,
ylab="Mean Reading Score", data=Means,
key=list(title="Gender", cex.title=1,
text=list(c("Female", "Male")), lines=list(lty=1:2, col=1:2),
points=list(pch=c(15, 1), col=1:2, cex=1.25)))
mod.ok <- lm(cbind(pre.1, pre.2, pre.3, pre.4, pre.5,
post.1, post.2, post.3, post.4, post.5,
fup.1, fup.2, fup.3, fup.4, fup.5) ~ treatment*gender,
data=OBrienKaiser)
mod.ok
(av.ok <- Anova(mod.ok, idata=idata, idesign=~phase*hour, type=3))
summary(av.ok, multivariate=FALSE)
linearHypothesis(mod.ok, "(Intercept) = 0", idata=idata,
idesign=~phase*hour, iterms="hour") # test hour main effect
(Hour <- model.matrix(~ hour, data=idata))
linearHypothesis(mod.ok, "(Intercept) = 0",
P=Hour[, c(2:5)]) # test hour main effect (equivalent)
linearHypothesis(mod.ok, "(Intercept) = 0", P=Hour[, 2, drop=FALSE]) # linear
linearHypothesis(mod.ok, "(Intercept) = )", P=Hour[, 3, drop=FALSE]) # quadratic
linearHypothesis(mod.ok, "(Intercept) = 0)", P=Hour[, 3, drop=FALSE]) # quadratic
linearHypothesis(mod.ok, "(Intercept) = 0", P=Hour[, 3, drop=FALSE]) # quadratic
linearHypothesis(mod.ok, "(Intercept) = 0", P=Hour[, 4, drop=FALSE]) # cubic
linearHypothesis(mod.ok, "(Intercept) = 0", P=Hour[, 5, drop=FALSE]) # quartic
linearHypothesis(mod.ok, "(Intercept) = 0", P=Hour[, c(2, 4:5)]) # all non-quadratic
library(car)
some(iris)
scatterplotMatrix(~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width | Species,
data=iris, smooth=FALSE, reg.line=FALSE, ellipse=TRUE, by.groups=TRUE, diagonal="none")
par(mfrow=c(2, 2))
par
?par
for  (response in c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width"))
Boxplot(iris[, response] ~ Species, data=iris, ylab=response)
mod.iris <- lm(cbind(Sepal.Length, Sepal.Width, Petal.Length, Petal.Width) ~ Species, data=iris)
class(mod.iris)
mod.iris
summary(mod.iris)
(manova.iris <- Anova(mod.iris))
class(manova.iris)
summary(manova.iris)
anova(mod.iris)
linearHypothesis(mod.iris, "0.5*Speciesversicolor + 0.5*Speciesvirginica", verbose=TRUE)
linearHypothesis(mod.iris, "Speciesversicolor = Speciesvirginica", verbose=TRUE)
?linearHypothesis
?car
?linearHypothesis
C <- matrix(c(1, -0.5, -0.5, 0, 1, -1), 3, 2)
colnames(C) <- c("setosa vs. versicolor & virginica", "versicolor & virginica")
colnames(C)
contrasts(iris$Species) <- C
contrasts(iris$Species)
(mod.iris.2 <- update(mod.iris))
mod.iris
linearHypothesis(mod.iris.2, c(0, 1, 0)) # setosa vs. versicolor & virginica
linearHypothesis(mod.iris.2, c(0, 0, 1)) # versicolor vs. virginica
anova(mod.iris, imatrix=list(Sepal.Length=matrix(c(1, 0, 0, 0))))
linearHypothesis(mod.iris, c("Speciesversicolor = 0", "Speciesvirginica = 0"),
P=matrix(c(1, 0, 0, 0))) # equivalent
linearHypothesis(mod.iris, c("Speciesversicolor = 0", "Speciesvirginica = 0"),
P=matrix(c(1, 0, 0, 0))) # equivalent
some(Adopted)
install.packages('swirl')
x <- 1:10
if(x>5) {
x <- 0
}
?connections
library(httr)
install.packages('httr')
library(httr)
oauth_endpoints("github")
GITHUB_CONSUMER_SECRET <- "f4380340a22aad674e895911d9c5e08cdf2df76f"
myapp <- oauth_app("github", "9fd7494d28cdc9900c0c")
myapp <- oauth_app("github", "9fd7494d28cdc9900c0c", "f4380340a22aad674e895911d9c5e08cdf2df76f")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
json1 = content(req)
json2 = jsonlite::fromJSON(toJSON(json1))
install.packages('jsonlite')
install.packages("jsonlite")
json2 = jsonlite::fromJSON(toJSON(json1))
install.packages('httr')
install.packages("httr")
install.packages("httr")
install.packages("httr")
install.packages("httr")
install.packages("httr")
install.packages('httr')
install.packages(c("knitr", "mvtnorm", "party"))
install.packages(c("knitr", "mvtnorm", "party"))
install.packages(c("knitr", "mvtnorm", "party"))
install.packages(c("knitr", "mvtnorm", "party"))
install.packages("spatial", lib="/usr/lib/R/library")
install.packages('jsonlite')
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications;
#    Use any URL you would like for the homepage URL (http://github.com is fine)
#    and http://localhost:1410 as the callback url
#
#    Insert your client ID and secret below - if secret is omitted, it will
#    look it up in the GITHUB_CONSUMER_SECRET environmental variable.
myapp <- oauth_app("github", "9fd7494d28cdc9900c0c", "f4380340a22aad674e895911d9c5e08cdf2df76f")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
json1 = content(req)
json2 = jsonlite::fromJSON(toJSON(json1))
library(jsonlite)
json2 = jsonlite::fromJSON(toJSON(json1))
View(json2)
View(json2)
View(json2)
json2[json2[json2$name=="datasharing"],created_at]
json2[which[json2$name=="datasharing"],created_at]
json2[which(json2$name=="datasharing"),created_at]
View(json2)
json2[which(json2$name=="datasharing"),json2$created_at]
json2[which(json2$name=="datasharing"),"created_at"]
file <- get("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"")
file <- get("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv")
file <- get("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv",method="CURL")
setwd("~/Projects/LaddeR/Getting_and_Cleaning_Data/w2q/")
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
download.file(fileURL, destfile="w2.csv", method="curl")
acs <- fread("w2.csv")
library(data.table)
acs <- fread("w2.csv")
install.packages('sqldf')
library(sqldf)
sql("select pwgtp1 from acs where AGEP<50")
sqldf("select pwgtp1 from acs where AGEP<50")
View(acs)
dat <- sqldf("select pwgtp1 from acs where AGEP<50")
table(dat)
unique(acs$AGEP)
sqldf("select unique AGEP from acs")
sqldf("select AGEP where unique from acs")
sqldf("select distinct pwgtp1 from acs")
sqldf("select distinct AGEP from acs")
unique(acs$AGEP)
con = url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlCode + readLines(con)
htmlCode = readLines(con)
close(con)
htmlCode
len(htmlCode[10])
htmlCode[10]
length(htmlCode[10])
install.packages('string1)
install.packages('stringi')
install.packages('stringr')
nchar(htmlCode[10])
l <- c(10, 20, 30,100)
nchar(htmlCode[l])
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"
download.file(fileURL, destfile="w2_5.for", method="curl")
q5 <- fread("w2_5.for")
q5 <- fwf(fileURL)
q5 <- read.fwf(fileURL)
q5 <- read.fwf(fileURL,widths = c(9,4,4,4,4,4,4,4,4),header=TRUE,skip=2)
download.file(fileURL, destfile="w2_5.for", method="curl")
q5 <- read.fwf(w2_5.for,widths = c(9,4,4,4,4,4,4,4,4),header=TRUE,skip=2)
q5 <- read.fwf("w2_5.for",widths = c(9,4,4,4,4,4,4,4,4),header=TRUE,skip=2)
q5 <- read.fwf("w2_5.for",widths = c(9,4,4,4,4,4,4,4,4),header=TRUE,skip=3)
q5 <- read.fwf("w2_5.for",widths = c(9,4,4,4,4,4,4,4,4),header=FALSE,skip=4)
View(`q5`)
q5 <- read.fwf("w2_5.for",widths = c(9,4,4,4,4,4,4,4,4),header=FALSE,skip=4,sep="     ")
q5 <- read.fwf("w2_5.for",widths = c(10,4,4,4,4,4,4,4,4),header=FALSE,skip=4,sep="\n")
View(`q5`)
q5 <- read.fwf("w2_5.for",widths = c(10,4,4,4,4,4,4,4,4),header=FALSE,skip=4,sep="     ")
q5 <- read.fwf("w2_5.for",widths = c(10,9,4,9,4,9,4,9,4),header=FALSE,skip=4,)
View(`q5`)
sum(q5{,4})
sum(q5[4])
